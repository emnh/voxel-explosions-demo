;; Analyzed by ClojureScript 1.8.40
{:use-macros {-invariant taoensso.truss.impl}, :excludes #{}, :name taoensso.truss, :imports nil, :requires {impl taoensso.truss.impl, taoensso.truss.impl taoensso.truss.impl}, :uses nil, :defs {get-dynamic-assertion-data {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/taoensso/truss.cljs", :line 117, :column 7, :end-line 117, :end-column 33, :arglists (quote ([])), :doc "Returns current value of dynamic assertion data"}, :name taoensso.truss/get-dynamic-assertion-data, :variadic false, :file "out.prod.client/taoensso/truss.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns current value of dynamic assertion data"}, -error-fn {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/taoensso/truss.cljs", :line 128, :column 8, :end-line 128, :end-column 17, :private true, :arglists (quote ([f]))}, :private true, :name taoensso.truss/-error-fn, :variadic false, :file "out.prod.client/taoensso/truss.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, set-error-fn! {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/taoensso/truss.cljs", :line 133, :column 7, :end-line 133, :end-column 20, :arglists (quote ([f])), :doc "Sets the root (fn [msg data-map]) called on invariant violations.\n  Defaults to (fn [msg data-map] (throw (ex-info msg data-map)))."}, :name taoensso.truss/set-error-fn!, :variadic false, :file "out.prod.client/taoensso/truss.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Sets the root (fn [msg data-map]) called on invariant violations.\n  Defaults to (fn [msg data-map] (throw (ex-info msg data-map)))."}}, :require-macros {impl taoensso.truss.impl, taoensso.truss.impl taoensso.truss.impl}, :cljs.analyzer/constants {:seen #{:default}, :order [:default]}, :doc "An opinionated assertions API for Clojure/Script"}