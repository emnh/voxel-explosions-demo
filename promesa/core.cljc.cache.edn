;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{map delay mapcat await spread promise}, :name promesa.core, :imports nil, :requires {org.bluebird org.bluebird}, :uses nil, :defs {->t_promesa$core7839 {:protocol-inline nil, :meta {:anonymous true, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([scheduled-task cur done? cancelled meta7840])), :file nil}, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/->t_promesa$core7839, :variadic false, :file "out.prod.client/promesa/core.cljc", :method-params ([scheduled-task cur done? cancelled meta7840]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 69, :max-fixed-arity 5, :fn-var true, :arglists (quote ([scheduled-task cur done? cancelled meta7840])), :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}}, -cancel {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 59, :column 4, :end-line 59, :end-column 11, :protocol promesa.core/ICancellable, :doc nil, :arglists (quote ([_]))}, :protocol promesa.core/ICancellable, :name promesa.core/-cancel, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 11, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, timeout {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 494, :column 10, :end-line 494, :end-column 17, :arglists (quote ([p t] [p t v])), :doc "Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}}, :name promesa.core/timeout, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p t] [p t v]), :arglists ([p t] [p t v]), :arglists-meta (nil nil)}, :method-params ([p t] [p t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 494, :end-line 494, :max-fixed-arity 3, :fn-var true, :arglists ([p t] [p t v]), :doc "Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError"}, Promise {:name promesa.core/Promise, :file "out.prod.client/promesa/core.cljc", :line 44, :column 4, :end-line 44, :end-column 24, :const true, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 44, :column 17, :end-line 44, :end-column 24, :const true}}, branch {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 406, :column 7, :end-line 406, :end-column 13, :arglists (quote ([p success failure]))}, :name promesa.core/branch, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 13, :method-params ([p success failure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 406, :end-line 406, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p success failure]))}, map {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 372, :column 7, :end-line 372, :end-column 10, :arglists (quote ([f p])), :doc "Apply a function to the promise value and\n  return a new promise with the result."}, :name promesa.core/map, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 10, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p])), :doc "Apply a function to the promise value and\n  return a new promise with the result."}, -map {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 150, :column 4, :end-line 150, :end-column 8, :protocol promesa.core/IPromise, :doc "Chain a promise.", :arglists (quote ([_ callback]))}, :protocol promesa.core/IPromise, :name promesa.core/-map, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 8, :method-params ([_ callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ callback])), :doc "Chain a promise."}, delay {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 503, :column 7, :end-line 503, :end-column 12, :arglists (quote ([t] [t v])), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}}, :name promesa.core/delay, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t v]), :arglists ([t] [t v]), :arglists-meta (nil nil)}, :method-params ([t] [t v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 2, :fn-var true, :arglists ([t] [t v]), :doc "Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached."}, resolved? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 345, :column 7, :end-line 345, :end-column 16, :arglists (quote ([p])), :doc "Returns true if promise `p` is already fulfilled."}, :name promesa.core/resolved?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is already fulfilled."}, mapcat {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 378, :column 7, :end-line 378, :end-column 13, :arglists (quote ([f p])), :doc "Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."}, :name promesa.core/mapcat, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 13, :method-params ([f p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f p])), :doc "Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."}, cancelled? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 472, :column 7, :end-line 472, :end-column 17, :arglists (quote ([v])), :doc "Return true if `v` is a cancelled promise."}, :name promesa.core/cancelled?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is a cancelled promise."}, IPromiseFactory {:meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 161, :column 14, :end-line 161, :end-column 29, :doc "A promise constructor abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-promise [[_]]}}}, :protocol-symbol true, :name promesa.core/IPromiseFactory, :file "out.prod.client/promesa/core.cljc", :end-column 29, :column 1, :line 161, :protocol-info {:methods {-promise [[_]]}}, :info nil, :end-line 161, :impls #{nil boolean object promesa.core/Promise number string function js/Error}, :doc "A promise constructor abstraction.", :jsdoc ("@interface")}, await {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 516, :column 7, :end-line 516, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name promesa.core/await, :variadic true, :file "out.prod.client/promesa/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 516, :end-line 516, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, bind {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 396, :column 7, :end-line 396, :end-column 11, :arglists (quote ([p callback])), :doc "A chain helper for promises."}, :name promesa.core/bind, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 11, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 396, :end-line 396, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "A chain helper for promises."}, any {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 454, :column 7, :end-line 454, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, :name promesa.core/any, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."}, scheduler {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 114, :column 11, :end-line 114, :end-column 20, :private true, :arglists (quote ([]))}, :private true, :name promesa.core/scheduler, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, finally {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 431, :column 7, :end-line 431, :end-column 14, :arglists (quote ([p callback])), :doc "Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."}, :name promesa.core/finally, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([p callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p callback])), :doc "Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."}, -promise {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 163, :column 4, :end-line 163, :end-column 12, :protocol promesa.core/IPromiseFactory, :doc "Create a promise instance.", :arglists (quote ([_]))}, :protocol promesa.core/IPromiseFactory, :name promesa.core/-promise, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Create a promise instance."}, t_promesa$core7839 {:num-fields 5, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/t_promesa$core7839, :file "out.prod.client/promesa/core.cljc", :type true, :anonymous true, :column 8, :line 69, :record false, :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}}, schedule {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 135, :column 7, :end-line 135, :end-column 15, :arglists (quote ([ms func])), :doc "Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."}, :name promesa.core/schedule, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([ms func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ms func])), :doc "Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."}, promisify {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 479, :column 7, :end-line 479, :end-column 16, :arglists (quote ([callable])), :doc "Given a nodejs like function that accepts a callback\n  as the last argument and return an other function\n  that returns a promise."}, :name promesa.core/promisify, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 16, :method-params ([callable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 1, :fn-var true, :arglists (quote ([callable])), :doc "Given a nodejs like function that accepts a callback\n  as the last argument and return an other function\n  that returns a promise."}, -extract {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 156, :column 4, :end-line 156, :end-column 12, :protocol promesa.core/IState, :doc "Extract the current value.", :arglists (quote ([_]))}, :protocol promesa.core/IState, :name promesa.core/-extract, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Extract the current value."}, rejected {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 324, :column 7, :end-line 324, :end-column 15, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, :name promesa.core/rejected, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a rejected promise with provided reason."}, promise {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 332, :column 7, :end-line 332, :end-column 14, :arglists (quote ([v])), :doc "The promise constructor."}, :name promesa.core/promise, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "The promise constructor."}, ->t_promesa$core7842 {:protocol-inline nil, :meta {:anonymous true, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([scheduled-task cur done? cancelled meta7843])), :file nil}, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/->t_promesa$core7842, :variadic false, :file "out.prod.client/promesa/core.cljc", :method-params ([scheduled-task cur done? cancelled meta7843]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :line 69, :max-fixed-arity 5, :fn-var true, :arglists (quote ([scheduled-task cur done? cancelled meta7843])), :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}}, IScheduler {:meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 62, :column 14, :end-line 62, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-schedule [[_ ms func]]}}}, :protocol-symbol true, :name promesa.core/IScheduler, :file "out.prod.client/promesa/core.cljc", :end-column 24, :column 1, :line 62, :protocol-info {:methods {-schedule [[_ ms func]]}}, :info nil, :end-line 62, :impls #{promesa.core/t_promesa$core7845 promesa.core/t_promesa$core7848}, :doc nil, :jsdoc ("@interface")}, IState {:meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 154, :column 14, :end-line 154, :end-column 20, :doc "Additional state/introspection abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-extract [[_]], -resolved? [[_]], -rejected? [[_]], -pending? [[_]]}}}, :protocol-symbol true, :name promesa.core/IState, :file "out.prod.client/promesa/core.cljc", :end-column 20, :column 1, :line 154, :protocol-info {:methods {-extract [[_]], -resolved? [[_]], -rejected? [[_]], -pending? [[_]]}}, :info nil, :end-line 154, :impls #{promesa.core/Promise}, :doc "Additional state/introspection abstraction.", :jsdoc ("@interface")}, -cancelled? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 60, :column 4, :end-line 60, :end-column 15, :protocol promesa.core/ICancellable, :doc nil, :arglists (quote ([_]))}, :protocol promesa.core/ICancellable, :name promesa.core/-cancelled?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, ->t_promesa$core7845 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([scheduler meta7846])), :file nil}, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :name promesa.core/->t_promesa$core7845, :variadic false, :file "out.prod.client/promesa/core.cljc", :method-params ([scheduler meta7846]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([scheduler meta7846])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, cancel! {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 466, :column 7, :end-line 466, :end-column 14, :arglists (quote ([p])), :doc "Cancel the promise."}, :name promesa.core/cancel!, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 466, :end-line 466, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Cancel the promise."}, t_promesa$core7845 {:num-fields 2, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :name promesa.core/t_promesa$core7845, :file "out.prod.client/promesa/core.cljc", :type true, :anonymous true, :column 6, :line 116, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, done? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 365, :column 7, :end-line 365, :end-column 12, :arglists (quote ([p])), :doc "Returns true if promise `p` is already done."}, :name promesa.core/done?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is already done."}, err {:name promesa.core/err, :file "out.prod.client/promesa/core.cljc", :line 427, :column 1, :end-line 427, :end-column 9, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 427, :column 6, :end-line 427, :end-column 9}, :doc "A short alias for `error` function."}, -resolved? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 157, :column 4, :end-line 157, :end-column 14, :protocol promesa.core/IState, :doc "Returns true if a promise is resolved.", :arglists (quote ([_]))}, :protocol promesa.core/IState, :name promesa.core/-resolved?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true if a promise is resolved."}, -schedule {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 63, :column 4, :end-line 63, :end-column 13, :protocol promesa.core/IScheduler, :doc nil, :arglists (quote ([_ ms func]))}, :protocol promesa.core/IScheduler, :name promesa.core/-schedule, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 13, :method-params ([_ ms func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ ms func])), :doc nil}, +scheduler+ {:redef true, :no-doc true, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 131, :column 23, :end-line 131, :end-column 34, :redef true, :no-doc true}, :name promesa.core/+scheduler+, :file "out.prod.client/promesa/core.cljc", :end-column 34, :column 1, :line 131, :end-line 131, :doc "A default scheduler instance."}, all {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 440, :column 7, :end-line 440, :end-column 10, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, :name promesa.core/all, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 10, :method-params ([promises]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 1, :fn-var true, :arglists (quote ([promises])), :doc "Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."}, promise? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 337, :column 7, :end-line 337, :end-column 15, :arglists (quote ([v])), :doc "Return true if `v` is a promise instance."}, :name promesa.core/promise?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if `v` is a promise instance."}, resolved {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 316, :column 7, :end-line 316, :end-column 15, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, :name promesa.core/resolved, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return a resolved promise with provided value."}, -pending? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 159, :column 4, :end-line 159, :end-column 13, :protocol promesa.core/IState, :doc "Retutns true if a promise is pending.", :arglists (quote ([_]))}, :protocol promesa.core/IState, :name promesa.core/-pending?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 13, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Retutns true if a promise is pending."}, scheduled-task {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 66, :column 11, :end-line 66, :end-column 25, :private true, :arglists (quote ([cur done?]))}, :private true, :name promesa.core/scheduled-task, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 25, :method-params ([cur done?]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cur done?]))}, promise->str {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 538, :column 7, :end-line 538, :end-column 19, :arglists (quote ([p]))}, :name promesa.core/promise->str, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 538, :end-line 538, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, t_promesa$core7848 {:num-fields 2, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :name promesa.core/t_promesa$core7848, :file "out.prod.client/promesa/core.cljc", :type true, :anonymous true, :column 6, :line 116, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, -rejected? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 158, :column 4, :end-line 158, :end-column 14, :protocol promesa.core/IState, :doc "Returns true if a promise is rejected.", :arglists (quote ([_]))}, :protocol promesa.core/IState, :name promesa.core/-rejected?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true if a promise is rejected."}, ->t_promesa$core7848 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([scheduler meta7849])), :file nil}, :protocols #{cljs.core/IMeta promesa.core/IScheduler cljs.core/IWithMeta}, :name promesa.core/->t_promesa$core7848, :variadic false, :file "out.prod.client/promesa/core.cljc", :method-params ([scheduler meta7849]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([scheduler meta7849])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_promesa$core7842 {:num-fields 5, :protocols #{promesa.core/ICancellable cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}, :name promesa.core/t_promesa$core7842, :file "out.prod.client/promesa/core.cljc", :type true, :anonymous true, :column 8, :line 69, :record false, :skip-protocol-flag #{cljs.core/IPending cljs.core/IMeta cljs.core/IWithMeta}}, ICancellable {:meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 57, :column 14, :end-line 57, :end-column 26, :doc "A cancellation abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-cancel [[_]], -cancelled? [[_]]}}}, :protocol-symbol true, :name promesa.core/ICancellable, :file "out.prod.client/promesa/core.cljc", :end-column 26, :column 1, :line 57, :protocol-info {:methods {-cancel [[_]], -cancelled? [[_]]}}, :info nil, :end-line 57, :impls #{promesa.core/t_promesa$core7842 promesa.core/Promise promesa.core/t_promesa$core7839}, :doc "A cancellation abstraction.", :jsdoc ("@interface")}, catch {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 412, :column 7, :end-line 412, :end-column 12, :arglists (quote ([p f] [p type f])), :doc "Catch all promise chain helper.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p f] [p type f]), :arglists ([p f] [p type f]), :arglists-meta (nil nil)}}, :name promesa.core/catch, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([p f] [p type f]), :arglists ([p f] [p type f]), :arglists-meta (nil nil)}, :method-params ([p f] [p type f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 3, :fn-var true, :arglists ([p f] [p type f]), :doc "Catch all promise chain helper."}, -catch {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 152, :column 4, :end-line 152, :end-column 10, :protocol promesa.core/IPromise, :doc "Catch a error in a promise.", :arglists (quote ([_ callback]))}, :protocol promesa.core/IPromise, :name promesa.core/-catch, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 10, :method-params ([_ callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ callback])), :doc "Catch a error in a promise."}, IPromise {:meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 148, :column 14, :end-line 148, :end-column 22, :doc "A basic future abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-map [[_ callback]], -bind [[_ callback]], -catch [[_ callback]]}}}, :protocol-symbol true, :name promesa.core/IPromise, :file "out.prod.client/promesa/core.cljc", :end-column 22, :column 1, :line 148, :protocol-info {:methods {-map [[_ callback]], -bind [[_ callback]], -catch [[_ callback]]}}, :info nil, :end-line 148, :impls #{promesa.core/Promise}, :doc "A basic future abstraction.", :jsdoc ("@interface")}, chain {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 401, :column 7, :end-line 401, :end-column 12, :arglists (quote ([p & funcs])), :doc "Like then but accepts multiple parameters.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(p funcs)], :arglists ([p & funcs]), :arglists-meta (nil)}}, :name promesa.core/chain, :variadic true, :file "out.prod.client/promesa/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(p funcs)], :arglists ([p & funcs]), :arglists-meta (nil)}, :method-params [(p funcs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 401, :end-line 401, :max-fixed-arity 1, :fn-var true, :arglists ([p & funcs]), :doc "Like then but accepts multiple parameters."}, rejected? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 350, :column 7, :end-line 350, :end-column 16, :arglists (quote ([p])), :doc "Returns true if promise `p` is already rejected."}, :name promesa.core/rejected?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is already rejected."}, then {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 389, :column 7, :end-line 389, :end-column 11, :arglists (quote ([p f])), :doc "Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator."}, :name promesa.core/then, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 11, :method-params ([p f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p f])), :doc "Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator."}, -bind {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 151, :column 4, :end-line 151, :end-column 9, :protocol promesa.core/IPromise, :doc "Chain a promise.", :arglists (quote ([_ callback]))}, :protocol promesa.core/IPromise, :name promesa.core/-bind, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 9, :method-params ([_ callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ callback])), :doc "Chain a promise."}, extract {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 360, :column 7, :end-line 360, :end-column 14, :arglists (quote ([p])), :doc "Returns the current promise value."}, :name promesa.core/extract, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 14, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns the current promise value."}, error {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 422, :column 7, :end-line 422, :end-column 12, :arglists (quote ([f p] [f type p])), :doc "Same as `catch` but with parameters inverted.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f p] [f type p]), :arglists ([f p] [f type p]), :arglists-meta (nil nil)}}, :name promesa.core/error, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f p] [f type p]), :arglists ([f p] [f type p]), :arglists-meta (nil nil)}, :method-params ([f p] [f type p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 3, :fn-var true, :arglists ([f p] [f type p]), :doc "Same as `catch` but with parameters inverted."}, pending? {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/promesa/core.cljc", :line 355, :column 7, :end-line 355, :end-column 15, :arglists (quote ([p])), :doc "Returns true if promise `p` is stil pending."}, :name promesa.core/pending?, :variadic false, :file "out.prod.client/promesa/core.cljc", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true if promise `p` is stil pending."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:private :else meta7843 scheduler cur meta7840 done? cancelled scheduled-task quote :arglists meta7846 meta7849}, :order [scheduled-task :private :arglists quote cur done? cancelled meta7840 meta7843 scheduler meta7846 meta7849 :else]}, :doc nil}