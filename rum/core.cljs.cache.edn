;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name rum.core, :imports nil, :requires {cljsjs.react cljsjs.react, cljsjs.react.dom cljsjs.react.dom, sablono.core sablono.core, rum.utils rum.utils}, :uses {call-all rum.utils, next-id rum.utils, collect rum.utils}, :defs {reactive-key {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 198, :column 8, :end-line 198, :end-column 20, :private true, :arglists (quote ([state]))}, :private true, :name rum.core/reactive-key, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, mount {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 131, :column 7, :end-line 131, :end-column 12, :arglists (quote ([component node]))}, :name rum.core/mount, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 12, :method-params ([component node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component node]))}, render->mixin {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 139, :column 7, :end-line 139, :end-column 20, :arglists (quote ([render-fn]))}, :name rum.core/render->mixin, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 20, :method-params ([render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([render-fn]))}, compare-by {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 112, :column 7, :end-line 112, :end-column 17, :arglists (quote ([keyfn]))}, :name rum.core/compare-by, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 17, :method-params ([keyfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([keyfn]))}, unmount {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 134, :column 7, :end-line 134, :end-column 14, :arglists (quote ([node]))}, :name rum.core/unmount, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 14, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, cursored {:name rum.core/cursored, :file "out.prod.client/rum/core.cljs", :line 306, :column 1, :end-line 306, :end-column 14, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 306, :column 6, :end-line 306, :end-column 14}}, local {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 175, :column 7, :end-line 175, :end-column 12, :arglists (quote ([initial & [key]])), :doc "Adds an atom to component’s state that can be used as local state.\n   Atom is stored under key `:rum/local`.\n   Component will be automatically re-rendered if atom’s value changes", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(initial [key])], :arglists ([initial & [key]]), :arglists-meta (nil)}}, :name rum.core/local, :variadic true, :file "out.prod.client/rum/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(initial [key])], :arglists ([initial & [key]]), :arglists-meta (nil)}, :method-params [(initial [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists ([initial & [key]]), :doc "Adds an atom to component’s state that can be used as local state.\n   Atom is stored under key `:rum/local`.\n   Component will be automatically re-rendered if atom’s value changes"}, reactive {:name rum.core/reactive, :file "out.prod.client/rum/core.cljs", :line 201, :column 1, :end-line 201, :end-column 14, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 201, :column 6, :end-line 201, :end-column 14}}, args->state {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 148, :column 7, :end-line 148, :end-column 18, :arglists (quote ([args]))}, :name rum.core/args->state, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 18, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args]))}, cursored-key {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 320, :column 8, :end-line 320, :end-column 20, :private true, :arglists (quote ([state]))}, :private true, :name rum.core/cursored-key, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, react {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 231, :column 7, :end-line 231, :end-column 12, :arglists (quote ([ref]))}, :name rum.core/react, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 12, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, schedule {:name rum.core/schedule, :file "out.prod.client/rum/core.cljs", :line 104, :column 1, :end-line 104, :end-column 14, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 104, :column 6, :end-line 104, :end-column 14}}, request-render {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 126, :column 7, :end-line 126, :end-column 21, :arglists (quote ([component]))}, :name rum.core/request-render, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 21, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, render-queue {:name rum.core/render-queue, :file "out.prod.client/rum/core.cljs", :line 117, :column 1, :end-line 117, :end-column 18, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 117, :column 6, :end-line 117, :end-column 18}}, deref-args {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 302, :column 8, :end-line 302, :end-column 18, :private true, :arglists (quote ([xs]))}, :private true, :name rum.core/deref-args, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 18, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, element {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 151, :column 7, :end-line 151, :end-column 14, :arglists (quote ([class state & [props]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(class state [props])], :arglists ([class state & [props]]), :arglists-meta (nil)}}, :name rum.core/element, :variadic true, :file "out.prod.client/rum/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(class state [props])], :arglists ([class state & [props]]), :arglists-meta (nil)}, :method-params [(class state [props])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists ([class state & [props]])}, with-key {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 159, :column 7, :end-line 159, :end-column 15, :arglists (quote ([element key]))}, :name rum.core/with-key, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 15, :method-params ([element key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([element key]))}, *reactions* {:name rum.core/*reactions*, :file "out.prod.client/rum/core.cljs", :line 196, :column 1, :end-line 196, :end-column 27, :dynamic true, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 196, :column 16, :end-line 196, :end-column 27, :dynamic true}}, render-state->mixin {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 142, :column 7, :end-line 142, :end-column 26, :arglists (quote ([render-fn]))}, :name rum.core/render-state->mixin, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 26, :method-params ([render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([render-fn]))}, cursored-watch {:name rum.core/cursored-watch, :file "out.prod.client/rum/core.cljs", :line 323, :column 1, :end-line 323, :end-column 20, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 323, :column 6, :end-line 323, :end-column 20}}, static {:name rum.core/static, :file "out.prod.client/rum/core.cljs", :line 167, :column 1, :end-line 167, :end-column 12, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 167, :column 6, :end-line 167, :end-column 12}}, render-comp->mixin {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 145, :column 7, :end-line 145, :end-column 25, :arglists (quote ([render-fn]))}, :name rum.core/render-comp->mixin, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 25, :method-params ([render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([render-fn]))}, cursor {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 290, :column 7, :end-line 290, :end-column 13, :arglists (quote ([ref path]))}, :name rum.core/cursor, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 13, :method-params ([ref path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref path]))}, state {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 10, :column 7, :end-line 10, :end-column 12, :arglists (quote ([comp]))}, :name rum.core/state, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 12, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp]))}, with-ref {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 162, :column 7, :end-line 162, :end-column 15, :arglists (quote ([element ref]))}, :name rum.core/with-ref, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 15, :method-params ([element ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([element ref]))}, render {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([]))}, :name rum.core/render, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, empty-queue {:name rum.core/empty-queue, :file "out.prod.client/rum/core.cljs", :line 116, :column 1, :end-line 116, :end-column 17, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 116, :column 6, :end-line 116, :end-column 17}}, ->LensCursor {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 237, :column 10, :end-line 237, :end-column 20, :protocols #{rum.core/Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([parent getter setter]))}, :protocols #{rum.core/Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}, :name rum.core/->LensCursor, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 20, :method-params ([parent getter setter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 237, :end-line 237, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent getter setter])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}}, ctor->class {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 156, :column 7, :end-line 156, :end-column 18, :arglists (quote ([ctor]))}, :name rum.core/ctor->class, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 18, :method-params ([ctor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctor]))}, id {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 13, :column 7, :end-line 13, :end-column 9, :arglists (quote ([comp]))}, :name rum.core/id, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 9, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp]))}, build-class {:protocol-inline nil, :meta {:file "/home/emh/github/rts/out.prod.client/rum/core.cljs", :line 16, :column 7, :end-line 16, :end-column 18, :arglists (quote ([classes display-name]))}, :name rum.core/build-class, :variadic false, :file "out.prod.client/rum/core.cljs", :end-column 18, :method-params ([classes display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([classes display-name]))}, LensCursor {:num-fields 3, :protocols #{rum.core/Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}, :name rum.core/LensCursor, :file "out.prod.client/rum/core.cljs", :end-column 20, :type true, :column 10, :line 237, :record false, :end-line 237, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IDeref cljs.core/IPrintWithWriter}}}, :require-macros {rum.core rum.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:rum/react-component :did-mount :will-unmount :componentDidUpdate :rum/om-args :rum/class :init :displayName :child-context :rum/refs :rum/args :rum/id parent :componentWillUnmount :componentWillReceiveProps :shouldComponentUpdate :did-update :will-mount :render :getChildContext :componentWillUpdate :getInitialState setter :will-update :class-properties :rum/local :componentDidMount :wrap-render :componentWillMount :should-update getter :transfer-state}, :order [:rum/id :init :will-mount :did-mount :transfer-state :should-update :will-update :render :wrap-render :did-update :will-unmount :child-context :class-properties :componentDidUpdate :displayName :componentWillUnmount :componentWillReceiveProps :shouldComponentUpdate :getChildContext :componentWillUpdate :getInitialState :componentDidMount :componentWillMount :rum/react-component :rum/args :rum/class :rum/local :rum/refs parent getter setter :rum/om-args]}, :doc nil}