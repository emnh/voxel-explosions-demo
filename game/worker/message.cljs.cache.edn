;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros}, :excludes #{}, :name game.worker.message, :imports nil, :requires {component com.stuartsierra.component, com.stuartsierra.component com.stuartsierra.component, math game.client.math, game.client.math game.client.math, engine game.worker.engine, game.worker.engine game.worker.engine, state game.worker.state, game.worker.state game.worker.state}, :uses nil, :defs {-on-message {:name game.worker.message/-on-message, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :line 12, :column 1, :end-line 13, :end-column 14, :meta {:file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :line 13, :column 3, :end-line 13, :end-column 14}}, on-message {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :line 66, :column 7, :end-line 66, :end-column 17, :arglists (quote ([component message]))}, :name game.worker.message/on-message, :variadic false, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :end-column 17, :method-params ([component message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component message]))}, new-core-Record {:num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.worker.message/new-core-Record, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :type true, :column 1, :internal-ctor true, :line 74, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->new-core-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([state camera unit-count width height poll-state map-dict started start-count stop-count])), :file nil}, :name game.worker.message/->new-core-Record, :variadic false, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :method-params ([state camera unit-count width height poll-state map-dict started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 74, :max-fixed-arity 10, :fn-var true, :arglists (quote ([state camera unit-count width height poll-state map-dict started start-count stop-count]))}, map->new-core-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__13851])), :file nil}, :name game.worker.message/map->new-core-Record, :variadic false, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :method-params ([G__13851]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13851]))}, new-core {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :line 75, :column 3, :end-line 75, :end-column 11, :arglists (quote ([]))}, :name game.worker.message/new-core, :variadic false, :file "/home/emh/public_html/github/rts/src.worker/game/worker/message.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {macros game.shared.macros, game.shared.macros game.shared.macros}, :cljs.analyzer/constants {:seen #{:started unit-count :aspect :start-engine :map-dict :scene-properties height :stop-count started :default :update-move-targets :width map-dict :state :state-buffer stop-count :fov :matrix :initialize width state :poll-state :start-count :camera :near :unit-count :far :hierarchy poll-state start-count :keywordize-keys :buffer camera :height}, :order [:hierarchy :default :poll-state :update-move-targets :initialize :state-buffer :camera :unit-count :scene-properties :map-dict :matrix :fov :near :far :aspect :width :height :buffer :state :start-engine :keywordize-keys :started :start-count :stop-count state camera unit-count width height poll-state map-dict started start-count stop-count]}, :doc nil}