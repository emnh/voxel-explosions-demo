;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros}, :excludes #{}, :name game.client.progress-manager, :imports nil, :requires {pprint cljs.pprint, cljs.pprint cljs.pprint, component com.stuartsierra.component, com.stuartsierra.component com.stuartsierra.component, p promesa.core, promesa.core promesa.core, config game.client.config, game.client.config game.client.config}, :uses nil, :defs {update-progress-item {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/progress_manager.cljs", :line 11, :column 7, :end-line 11, :end-column 27, :arglists (quote ([component resource completed size]))}, :name game.client.progress-manager/update-progress-item, :variadic false, :file "src.client/game/client/progress_manager.cljs", :end-column 27, :method-params ([component resource completed size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 4, :fn-var true, :arglists (quote ([component resource completed size]))}, get-progress-map {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/progress_manager.cljs", :line 20, :column 7, :end-line 20, :end-column 23, :arglists (quote ([component]))}, :name game.client.progress-manager/get-progress-map, :variadic false, :file "src.client/game/client/progress_manager.cljs", :end-column 23, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, new-progress-manager-Record {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.progress-manager/new-progress-manager-Record, :file "src.client/game/client/progress_manager.cljs", :type true, :column 1, :internal-ctor true, :line 24, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->new-progress-manager-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([progress-map started start-count stop-count])), :file nil}, :name game.client.progress-manager/->new-progress-manager-Record, :variadic false, :file "src.client/game/client/progress_manager.cljs", :method-params ([progress-map started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :max-fixed-arity 4, :fn-var true, :arglists (quote ([progress-map started start-count stop-count]))}, map->new-progress-manager-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__13865])), :file nil}, :name game.client.progress-manager/map->new-progress-manager-Record, :variadic false, :file "src.client/game/client/progress_manager.cljs", :method-params ([G__13865]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13865]))}, new-progress-manager {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/progress_manager.cljs", :line 25, :column 3, :end-line 25, :end-column 23, :arglists (quote ([]))}, :name game.client.progress-manager/new-progress-manager, :variadic false, :file "src.client/game/client/progress_manager.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {macros game.shared.macros, game.shared.macros game.shared.macros, pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:started :stop-count started :completed stop-count :total :progress-map :start-count progress-map start-count}, :order [:progress-map :completed :total :started :start-count :stop-count progress-map started start-count stop-count]}, :doc nil}