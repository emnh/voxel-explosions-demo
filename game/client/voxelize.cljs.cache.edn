;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros, infix infix.macros}, :excludes #{}, :name game.client.voxelize, :imports nil, :requires {pprint cljs.pprint, math game.client.math, p promesa.core, promesa.core promesa.core, game.client.math game.client.math, m cats.core, cats.core cats.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component}, :uses nil, :defs {get-time {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 371, :column 3, :end-line 371, :end-column 11, :arglists (quote ([]))}, :name game.client.voxelize/get-time, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 371, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-voxel {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 310, :column 3, :end-line 310, :end-column 12, :arglists (quote ([voxels voxel-count x y z]))}, :name game.client.voxelize/set-voxel, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 12, :method-params ([voxels voxel-count x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 310, :max-fixed-arity 5, :fn-var true, :arglists (quote ([voxels voxel-count x y z]))}, set-unset-voxel {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 298, :column 3, :end-line 298, :end-column 18, :arglists (quote ([voxels voxel-count x y z f]))}, :name game.client.voxelize/set-unset-voxel, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 18, :method-params ([voxels voxel-count x y z f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 298, :max-fixed-arity 6, :fn-var true, :arglists (quote ([voxels voxel-count x y z f]))}, int32-size-bits {:name game.client.voxelize/int32-size-bits, :file "src.client/game/client/voxelize.cljs", :line 16, :column 1, :end-line 16, :end-column 21, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 16, :column 6, :end-line 16, :end-column 21}}, v3-size {:name game.client.voxelize/v3-size, :file "src.client/game/client/voxelize.cljs", :line 20, :column 1, :end-line 20, :end-column 13, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 20, :column 6, :end-line 20, :end-column 13}}, is-set? {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 286, :column 3, :end-line 286, :end-column 10, :arglists (quote ([voxels voxel-count x y z]))}, :name game.client.voxelize/is-set?, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 10, :method-params ([voxels voxel-count x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 286, :max-fixed-arity 5, :fn-var true, :arglists (quote ([voxels voxel-count x y z]))}, box-faces {:name game.client.voxelize/box-faces, :file "src.client/game/client/voxelize.cljs", :line 18, :column 1, :end-line 18, :end-column 15, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 18, :column 6, :end-line 18, :end-column 15}}, triangle-size {:name game.client.voxelize/triangle-size, :file "src.client/game/client/voxelize.cljs", :line 21, :column 1, :end-line 21, :end-column 19, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 21, :column 6, :end-line 21, :end-column 19}}, unset-voxel {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 315, :column 3, :end-line 315, :end-column 14, :arglists (quote ([voxels voxel-count x y z]))}, :name game.client.voxelize/unset-voxel, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 14, :method-params ([voxels voxel-count x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 315, :max-fixed-arity 5, :fn-var true, :arglists (quote ([voxels voxel-count x y z]))}, int32-size-bytes {:name game.client.voxelize/int32-size-bytes, :file "src.client/game/client/voxelize.cljs", :line 15, :column 1, :end-line 15, :end-column 22, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 15, :column 6, :end-line 15, :end-column 22}}, voxelize-geometry {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 376, :column 3, :end-line 376, :end-column 20, :arglists (quote ([geometry voxel-count])), :doc "Returns bit-array of voxels of size voxel-count^3 containing voxelized\n  geometry"}, :name game.client.voxelize/voxelize-geometry, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 20, :method-params ([geometry voxel-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 376, :max-fixed-arity 2, :fn-var true, :arglists (quote ([geometry voxel-count])), :doc "Returns bit-array of voxels of size voxel-count^3 containing voxelized\n  geometry"}, voxelize-output {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 155, :column 3, :end-line 155, :end-column 18, :arglists (quote ([voxel-dict])), :doc "Returns geometry of cubes representing voxels"}, :name game.client.voxelize/voxelize-output, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 18, :method-params ([voxel-dict]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([voxel-dict])), :doc "Returns geometry of cubes representing voxels"}, all-bits-set {:name game.client.voxelize/all-bits-set, :file "src.client/game/client/voxelize.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 17, :column 6, :end-line 17, :end-column 18}}, v2-size {:name game.client.voxelize/v2-size, :file "src.client/game/client/voxelize.cljs", :line 19, :column 1, :end-line 19, :end-column 13, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 19, :column 6, :end-line 19, :end-column 13}}, fill-inside {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 319, :column 7, :end-line 319, :end-column 18, :arglists (quote ([voxel-dict]))}, :name game.client.voxelize/fill-inside, :variadic false, :file "src.client/game/client/voxelize.cljs", :end-column 18, :method-params ([voxel-dict]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([voxel-dict]))}, billboard-corners {:name game.client.voxelize/billboard-corners, :file "src.client/game/client/voxelize.cljs", :line 22, :column 1, :end-line 22, :end-column 23, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/voxelize.cljs", :line 22, :column 6, :end-line 22, :end-column 23}}}, :require-macros {infix.macros infix.macros, macros game.shared.macros, game.shared.macros game.shared.macros, pprint cljs.pprint, cljs.pprint cljs.pprint, m cats.core, cats.core cats.core}, :cljs.analyzer/constants {:seen #{mat x new-geometry js/THREE.InstancedBufferGeometry :voxel-width distance .-x box-translations-attr .-c aget z-offset .-vertices bit-shift-left total-voxels inc-get-index box-translations i uv c-uv-index b-uv a range map-indexed x-offset index-bit .computeBoundingSphere :uvs x-index doseq :voxel-height y .makeTranslation int32 voxel-width infix one-box :offset-y y-offset .computeFaceNormals js/Float32Array * int32-size-bits inc-voxel-count .fromGeometry let -> js/THREE.Vector2 .computeVertexNormals billboard-coords-attr voxel-set? a-uv-index fn js/THREE.BoxGeometry voxel-dict bgeo quot .-faces yz-index not= index :voxels uvs uv1 voxel-height c-uv2 :offset-z uv3 _ defn y-offset-centre if cv .-z box-indices new .clone js/THREE.Geometry mod billboard-coords b-uv-index :voxel-count a-uv2 :voxel-depth index-main box-faces .push uv2 box println triangle-size .addAttribute av js/THREE.BufferAttribute instanced-voxelize-output voxels bit-and box-clone .merge y-index x-offset-centre / vector :offset-x a-uv1 .translate voxel-depth z-offset-centre .-a c-uv voxel-count min-offset-x c z a-uv face-vertex-uvs z-index b-uv2 inc js/THREE.Matrix4 bv + aset face .-y .-b min-offset-y min-offset-z b get-index c-uv1 b-uv1 .-faceVertexUvs bit box-indices-attr billboard-corners .computeBoundingBox}, :order [defn instanced-voxelize-output voxel-dict let new-geometry new js/THREE.Geometry bgeo js/THREE.InstancedBufferGeometry voxel-count :voxel-count inc-voxel-count inc voxel-width :voxel-width voxel-height :voxel-height voxel-depth :voxel-depth box js/THREE.BoxGeometry one-box _ -> .translate min-offset-x :offset-x min-offset-y :offset-y min-offset-z :offset-z voxels :voxels total-voxels * box-indices box-translations billboard-coords uvs :uvs get-index fn x y z infix + inc-get-index doseq index range index-main quot int32-size-bits index-bit mod int32 aget bit bit-and bit-shift-left voxel-set? not= if x-index yz-index y-index z-index x-offset-centre y-offset-centre z-offset-centre x-offset y-offset z-offset box-clone .clone face-vertex-uvs .-faceVertexUvs mat js/THREE.Matrix4 i face map-indexed vector .-faces a .-a b .-b c .-c av .-vertices bv cv a-uv-index .-x .-y .-z b-uv-index c-uv-index a-uv1 a-uv2 a-uv js/THREE.Vector2 b-uv1 b-uv2 b-uv c-uv1 c-uv2 c-uv aset box-faces triangle-size .push / billboard-corners .makeTranslation .merge .fromGeometry js/Float32Array box-indices-attr js/THREE.BufferAttribute box-translations-attr billboard-coords-attr .addAttribute .computeBoundingBox .computeBoundingSphere .computeFaceNormals .computeVertexNormals println distance uv1 uv2 uv3 uv]}, :doc nil}