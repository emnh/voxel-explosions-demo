;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros, infix infix.macros}, :excludes #{}, :name game.client.ground-local, :imports nil, :requires {game.client.config game.client.config, pprint cljs.pprint, math game.client.math, p promesa.core, promesa.core promesa.core, game.client.math game.client.math, config game.client.config, m cats.core, cats.core cats.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, game.client.common game.client.common, common game.client.common}, :uses {floor game.client.math, data game.client.common, isNaN game.client.math}, :defs {rgba-size {:name game.client.ground-local/rgba-size, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 16, :column 1, :end-line 16, :end-column 15, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 16, :column 6, :end-line 16, :end-column 15}}, xy-index-to-index {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 18, :column 7, :end-line 18, :end-column 24, :arglists (quote ([x-faces y-faces x y]))}, :name game.client.ground-local/xy-index-to-index, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 24, :method-params ([x-faces y-faces x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x-faces y-faces x y]))}, new-init-ground {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 170, :column 3, :end-line 170, :end-column 18, :arglists (quote ([]))}, :name game.client.ground-local/new-init-ground, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-height {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 37, :column 7, :end-line 37, :end-column 17, :arglists (quote ([component x y]))}, :name game.client.ground-local/get-height, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 17, :method-params ([component x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([component x y]))}, xy-to-index {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 26, :column 7, :end-line 26, :end-column 18, :arglists (quote ([width height x-faces y-faces x y]))}, :name game.client.ground-local/xy-to-index, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 18, :method-params ([width height x-faces y-faces x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 6, :fn-var true, :arglists (quote ([width height x-faces y-faces x y]))}, get-map {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 95, :column 7, :end-line 95, :end-column 14, :arglists (quote ([component config mesh simplex]))}, :name game.client.ground-local/get-map, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 14, :method-params ([component config mesh simplex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 4, :fn-var true, :arglists (quote ([component config mesh simplex]))}, align-to-ground {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 76, :column 3, :end-line 76, :end-column 18, :arglists (quote ([ground bbox xpos zpos]))}, :name game.client.ground-local/align-to-ground, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 18, :method-params ([ground bbox xpos zpos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 76, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ground bbox xpos zpos]))}, map->new-init-ground-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__12125])), :file nil}, :name game.client.ground-local/map->new-init-ground-Record, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :method-params ([G__12125]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__12125]))}, xy-to-index-return {:num-fields 5, :protocols #{}, :name game.client.ground-local/xy-to-index-return, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 21, :type true, :column 3, :line 23, :record false, :end-line 23, :skip-protocol-flag nil}, new-init-ground-Record {:num-fields 13, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.ground-local/new-init-ground-Record, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :type true, :column 1, :internal-ctor true, :line 169, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->xy-to-index-return {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :line 23, :column 3, :end-line 23, :end-column 21, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([xd yd xi yi idx]))}, :protocols #{}, :name game.client.ground-local/->xy-to-index-return, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :end-column 21, :method-params ([xd yd xi yi idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 22, :end-line 23, :max-fixed-arity 5, :fn-var true, :arglists (quote ([xd yd xi yi idx])), :skip-protocol-flag nil}, ->new-init-ground-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([config params mesh height-field width height x-faces y-faces data-texture float-texture-divisor started start-count stop-count])), :file nil}, :name game.client.ground-local/->new-init-ground-Record, :variadic false, :file "/home/emh/public_html/github/rts/src.client/game/client/ground_local.cljs", :method-params ([config params mesh height-field width height x-faces y-faces data-texture float-texture-divisor started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 169, :max-fixed-arity 13, :fn-var true, :arglists (quote ([config params mesh height-field width height x-faces y-faces data-texture float-texture-divisor started start-count stop-count]))}}, :require-macros {infix.macros infix.macros, macros game.shared.macros, game.shared.macros game.shared.macros, pprint cljs.pprint, cljs.pprint cljs.pprint, m cats.core, cats.core cats.core}, :cljs.analyzer/constants {:seen #{idx :started float-texture-divisor :y-faces height :min-elevation :stop-count started :config yd :height-field y-faces :width :params xd stop-count config :simplex :data-texture height-field xi params width :mesh :terrain :start-count yi data-texture :x-faces mesh :float-texture-divisor start-count x-faces :max-elevation :height}, :order [xd yd xi yi idx :terrain :x-faces :y-faces :max-elevation :min-elevation :width :height :height-field :mesh :data-texture :float-texture-divisor :config :params :started :start-count :stop-count :simplex config params mesh height-field width height x-faces y-faces data-texture float-texture-divisor started start-count stop-count]}, :doc nil}