;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros, html sablono.core, infix infix.macros}, :excludes #{}, :name game.client.selection, :imports nil, :requires {engine game.client.engine, pprint cljs.pprint, math game.client.math, p promesa.core, promesa.core promesa.core, jayq jayq.core, scene game.client.scene, game.shared.state game.shared.state, rum.core rum.core, rum rum.core, game.client.math game.client.math, game.client.scene game.client.scene, sablono.core sablono.core, sablono sablono.core, m cats.core, cats.core cats.core, jayq.core jayq.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, controls game.client.controls, state game.shared.state, component com.stuartsierra.component, string clojure.string, game.client.common game.client.common, common game.client.common, clojure.string clojure.string, game.client.engine game.client.engine, game.client.controls game.client.controls}, :uses {with-simple-cause game.shared.state, join clojure.string, data game.client.common, pi game.client.math, $ jayq.core, list-item game.client.common, unique-id game.client.common, new-jsobj game.client.common}, :defs {->new-selector-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([scene init-scene params $overlay renderer camera units scene-properties $selection-layer $selection-div start-pos end-pos selecting? selected frame-queued? started start-count stop-count])), :file nil}, :name game.client.selection/->new-selector-Record, :variadic false, :file "src.client/game/client/selection.cljs", :method-params ([scene init-scene params $overlay renderer camera units scene-properties $selection-layer $selection-div start-pos end-pos selecting? selected frame-queued? started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 410, :max-fixed-arity 18, :fn-var true, :arglists (quote ([scene init-scene params $overlay renderer camera units scene-properties $selection-layer $selection-div start-pos end-pos selecting? selected frame-queued? started start-count stop-count]))}, new-selector {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 411, :column 3, :end-line 411, :end-column 15, :arglists (quote ([]))}, :name game.client.selection/new-selector, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 411, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, rectangle-select {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 338, :column 3, :end-line 338, :end-column 19, :arglists (quote ([component x2 y2 update]))}, :name game.client.selection/rectangle-select, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 19, :method-params ([component x2 y2 update]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 338, :max-fixed-arity 4, :fn-var true, :arglists (quote ([component x2 y2 update]))}, check-intersect-screen {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 251, :column 3, :end-line 251, :end-column 25, :arglists (quote ([component x1 y1 x2 y2]))}, :name game.client.selection/check-intersect-screen, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 25, :method-params ([component x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 251, :max-fixed-arity 5, :fn-var true, :arglists (quote ([component x1 y1 x2 y2]))}, new-selector-Record {:num-fields 18, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.selection/new-selector-Record, :file "src.client/game/client/selection.cljs", :type true, :column 1, :internal-ctor true, :line 410, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-screen-radius {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 133, :column 7, :end-line 133, :end-column 24, :arglists (quote ([height camera position r3])), :doc "get screen radius of 3d sphere"}, :name game.client.selection/get-screen-radius, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 24, :method-params ([height camera position r3]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 4, :fn-var true, :arglists (quote ([height camera position r3])), :doc "get screen radius of 3d sphere"}, get-screen-boxes {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 92, :column 7, :end-line 92, :end-column 23, :arglists (quote ([component]))}, :name game.client.selection/get-screen-boxes, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 23, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, check-intersect {:name game.client.selection/check-intersect, :file "src.client/game/client/selection.cljs", :line 335, :column 1, :end-line 335, :end-column 21, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 335, :column 6, :end-line 335, :end-column 21}}, mark {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 27, :column 7, :end-line 27, :end-column 11, :arglists (quote ([component mesh]))}, :name game.client.selection/mark, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 11, :method-params ([component mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component mesh]))}, frustum-check {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 203, :column 3, :end-line 203, :end-column 16, :arglists (quote ([component x1 y1 x2 y2]))}, :name game.client.selection/frustum-check, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 16, :method-params ([component x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 203, :max-fixed-arity 5, :fn-var true, :arglists (quote ([component x1 y1 x2 y2]))}, get-bounding-box-geometry {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 56, :column 7, :end-line 56, :end-column 32, :arglists (quote ([mesh] [mesh clone?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([mesh] [mesh clone?]), :arglists ([mesh] [mesh clone?]), :arglists-meta (nil nil)}}, :name game.client.selection/get-bounding-box-geometry, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([mesh] [mesh clone?]), :arglists ([mesh] [mesh clone?]), :arglists-meta (nil nil)}, :method-params ([mesh] [mesh clone?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists ([mesh] [mesh clone?])}, unmark-all {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([component]))}, :name game.client.selection/unmark-all, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 17, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, check-intersect-screen-circles {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 303, :column 3, :end-line 303, :end-column 33, :arglists (quote ([component x1 y1 x2 y2]))}, :name game.client.selection/check-intersect-screen-circles, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 33, :method-params ([component x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 303, :max-fixed-arity 5, :fn-var true, :arglists (quote ([component x1 y1 x2 y2]))}, get-screen-circles {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 147, :column 7, :end-line 147, :end-column 25, :arglists (quote ([component]))}, :name game.client.selection/get-screen-circles, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 25, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, on-mouse-down {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 366, :column 3, :end-line 366, :end-column 16, :arglists (quote ([component event-data]))}, :name game.client.selection/on-mouse-down, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 16, :method-params ([component event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 366, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component event-data]))}, map->new-selector-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__25666])), :file nil}, :name game.client.selection/map->new-selector-Record, :variadic false, :file "src.client/game/client/selection.cljs", :method-params ([G__25666]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25666]))}, get-screen-boxes-from-last-overlay-render {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 191, :column 7, :end-line 191, :end-column 48, :arglists (quote ([component]))}, :name game.client.selection/get-screen-boxes-from-last-overlay-render, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 48, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, circle-rectangle-intersects? {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 276, :column 3, :end-line 276, :end-column 31, :arglists (quote ([circle rect-x1 rect-y1 rect-x2 rect-y2]))}, :name game.client.selection/circle-rectangle-intersects?, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 31, :method-params ([circle rect-x1 rect-y1 rect-x2 rect-y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 276, :max-fixed-arity 5, :fn-var true, :arglists (quote ([circle rect-x1 rect-y1 rect-x2 rect-y2]))}, LEFT_MOUSE_BUTTON {:name game.client.selection/LEFT_MOUSE_BUTTON, :file "src.client/game/client/selection.cljs", :line 23, :column 1, :end-line 23, :end-column 23, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 23, :column 6, :end-line 23, :end-column 23}}, on-mouse-move {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 395, :column 3, :end-line 395, :end-column 16, :arglists (quote ([component event-data]))}, :name game.client.selection/on-mouse-move, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 16, :method-params ([component event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 395, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component event-data]))}, RIGHT_MOUSE_BUTTON {:name game.client.selection/RIGHT_MOUSE_BUTTON, :file "src.client/game/client/selection.cljs", :line 25, :column 1, :end-line 25, :end-column 24, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 25, :column 6, :end-line 25, :end-column 24}}, MIDDLE_MOUSE_BUTTON {:name game.client.selection/MIDDLE_MOUSE_BUTTON, :file "src.client/game/client/selection.cljs", :line 24, :column 1, :end-line 24, :end-column 25, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 24, :column 6, :end-line 24, :end-column 25}}, on-mouse-up {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/selection.cljs", :line 404, :column 7, :end-line 404, :end-column 18, :arglists (quote ([component event-data]))}, :name game.client.selection/on-mouse-up, :variadic false, :file "src.client/game/client/selection.cljs", :end-column 18, :method-params ([component event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component event-data]))}}, :require-macros {pprint cljs.pprint, infix.macros infix.macros, rum.core rum.core, game.shared.macros game.shared.macros, rum rum.core, macros game.shared.macros, sablono.core sablono.core, sablono sablono.core, m cats.core, cats.core cats.core, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:y :started :mesh-to-screenbox-map units init-scene :$selection-layer :r $selection-div :selected :scene-properties start-pos $overlay scene :unit :stop-count :frame-queued? started :top :mark $selection-layer :end-pos selected :width scene-properties :params stop-count frame-queued? :renderer end-pos params :selecting? :mesh :start-count renderer :camera :units :x selecting? :init-scene start-count :$selection-div :start-pos camera :height :$page :$overlay :scene :left}, :order [:selected :mesh :mark :camera :scene-properties :width :height :units :x :y :r :mesh-to-screenbox-map :unit :frame-queued? :selecting? :start-pos :end-pos :$selection-div :left :top :scene :init-scene :params :$overlay :renderer :$selection-layer :started :start-count :stop-count :$page scene init-scene params $overlay renderer camera units scene-properties $selection-layer $selection-div start-pos end-pos selecting? selected frame-queued? started start-count stop-count]}, :doc nil}