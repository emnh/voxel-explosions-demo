;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros, html sablono.core}, :excludes #{}, :name game.client.page-load-test, :imports nil, :requires {game.client.config game.client.config, pprint cljs.pprint, math game.client.math, p promesa.core, promesa.core promesa.core, routing game.client.routing, jayq jayq.core, game.client.routing game.client.routing, rum.core rum.core, rum rum.core, game.client.math game.client.math, config game.client.config, game.client.progress-manager game.client.progress-manager, sablono.core sablono.core, progress-manager game.client.progress-manager, sablono sablono.core, jayq.core jayq.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, game.client.common game.client.common, common game.client.common}, :uses {$ jayq.core, header game.client.common, list-item game.client.common, round game.client.math, get-progress-map game.client.progress-manager}, :defs {format-progress {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/page_load_test.cljs", :line 44, :column 3, :end-line 44, :end-column 18, :arglists (quote ([progress-map]))}, :name game.client.page-load-test/format-progress, :variadic false, :file "src.client/game/client/page_load_test.cljs", :end-column 18, :method-params ([progress-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([progress-map]))}, progress-bar {:name game.client.page-load-test/progress-bar, :arglists (quote ([text complete])), :meta {:file nil, :arglists (quote ([text complete]))}, :doc "complete is a number from 0 to 100", :file "src.client/game/client/page_load_test.cljs", :line 20, :column 1}, map->new-load-test-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__27020])), :file nil}, :name game.client.page-load-test/map->new-load-test-Record, :variadic false, :file "src.client/game/client/page_load_test.cljs", :method-params ([G__27020]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27020]))}, new-load-test {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/page_load_test.cljs", :line 89, :column 9, :end-line 89, :end-column 22, :arglists (quote ([]))}, :name game.client.page-load-test/new-load-test, :variadic false, :file "src.client/game/client/page_load_test.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, load-test {:name game.client.page-load-test/load-test, :arglists (quote ([component])), :meta {:file nil, :arglists (quote ([component]))}, :doc "", :file "src.client/game/client/page_load_test.cljs", :line 71, :column 1}, start {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/page_load_test.cljs", :line 78, :column 7, :end-line 78, :end-column 12, :arglists (quote ([component]))}, :name game.client.page-load-test/start, :variadic false, :file "src.client/game/client/page_load_test.cljs", :end-column 12, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, progress-list {:name game.client.page-load-test/progress-list, :arglists (quote ([component])), :meta {:file nil, :arglists (quote ([component]))}, :doc "", :file "src.client/game/client/page_load_test.cljs", :line 63, :column 1}, stop {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/page_load_test.cljs", :line 83, :column 7, :end-line 83, :end-column 11, :arglists (quote ([component]))}, :name game.client.page-load-test/stop, :variadic false, :file "src.client/game/client/page_load_test.cljs", :end-column 11, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component]))}, new-load-test-Record {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.page-load-test/new-load-test-Record, :file "src.client/game/client/page_load_test.cljs", :type true, :column 1, :internal-ctor true, :line 89, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->new-load-test-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([progress-manager started start-count stop-count])), :file nil}, :name game.client.page-load-test/->new-load-test-Record, :variadic false, :file "src.client/game/client/page_load_test.cljs", :method-params ([progress-manager started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 89, :max-fixed-arity 4, :fn-var true, :arglists (quote ([progress-manager started start-count stop-count]))}}, :require-macros {macros game.shared.macros, game.shared.macros game.shared.macros, pprint cljs.pprint, cljs.pprint cljs.pprint, rum rum.core, rum.core rum.core, sablono sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:started :rum/class :stop-count started :progress-manager :completed stop-count progress-manager :total :start-count start-count :$page}, :order [:rum/class :completed :total :progress-manager :$page :started :start-count :stop-count progress-manager started start-count stop-count]}, :doc nil}