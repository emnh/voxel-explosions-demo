;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros, html sablono.core, infix infix.macros}, :excludes #{}, :name game.client.overlay, :imports nil, :requires {engine game.client.engine, selection game.client.selection, pprint cljs.pprint, math game.client.math, p promesa.core, promesa.core promesa.core, jayq jayq.core, scene game.client.scene, game.shared.state game.shared.state, game.client.selection game.client.selection, rum.core rum.core, rum rum.core, game.client.math game.client.math, game.client.scene game.client.scene, sablono.core sablono.core, sablono sablono.core, m cats.core, cats.core cats.core, jayq.core jayq.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, state game.shared.state, component com.stuartsierra.component, string clojure.string, game.client.common game.client.common, common game.client.common, clojure.string clojure.string, game.client.engine game.client.engine}, :uses {with-simple-cause game.shared.state, join clojure.string, data game.client.common, $ jayq.core, list-item game.client.common, unique-id game.client.common, new-jsobj game.client.common}, :defs {new-xp-overlay {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 430, :column 3, :end-line 430, :end-column 17, :arglists (quote ([]))}, :name game.client.overlay/new-xp-overlay, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 430, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->new-xp-overlay-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([scene init-scene scene-properties units pixi-overlay camera material mesh-parent old-mesh started start-count stop-count])), :file nil}, :name game.client.overlay/->new-xp-overlay-Record, :variadic false, :file "src.client/game/client/overlay.cljs", :method-params ([scene init-scene scene-properties units pixi-overlay camera material mesh-parent old-mesh started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 429, :max-fixed-arity 12, :fn-var true, :arglists (quote ([scene init-scene scene-properties units pixi-overlay camera material mesh-parent old-mesh started start-count stop-count]))}, sprite-cache {:name game.client.overlay/sprite-cache, :file "src.client/game/client/overlay.cljs", :line 27, :column 1, :end-line 27, :end-column 22, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 27, :column 10, :end-line 27, :end-column 22}}, draw-health-bar {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 140, :column 7, :end-line 140, :end-column 22, :arglists (quote ([component stage partial-select-texture transparent-texture index box]))}, :name game.client.overlay/draw-health-bar, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 22, :method-params ([component stage partial-select-texture transparent-texture index box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 6, :fn-var true, :arglists (quote ([component stage partial-select-texture transparent-texture index box]))}, fragment-shader {:name game.client.overlay/fragment-shader, :file "src.client/game/client/overlay.cljs", :line 318, :column 1, :end-line 318, :end-column 21, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 318, :column 6, :end-line 318, :end-column 21}}, xyzw-size {:name game.client.overlay/xyzw-size, :file "src.client/game/client/overlay.cljs", :line 24, :column 1, :end-line 24, :end-column 15, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 24, :column 6, :end-line 24, :end-column 15}}, shadow-height {:name game.client.overlay/shadow-height, :file "src.client/game/client/overlay.cljs", :line 71, :column 1, :end-line 71, :end-column 19, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 71, :column 6, :end-line 71, :end-column 19}}, new-sprite-cache {:name game.client.overlay/new-sprite-cache, :file "src.client/game/client/overlay.cljs", :line 28, :column 1, :end-line 28, :end-column 26, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 28, :column 10, :end-line 28, :end-column 26}}, map->new-overlay-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__25772])), :file nil}, :name game.client.overlay/map->new-overlay-Record, :variadic false, :file "src.client/game/client/overlay.cljs", :method-params ([G__25772]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25772]))}, xyz-size {:name game.client.overlay/xyz-size, :file "src.client/game/client/overlay.cljs", :line 23, :column 1, :end-line 23, :end-column 14, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 23, :column 6, :end-line 23, :end-column 14}}, bar-height {:name game.client.overlay/bar-height, :file "src.client/game/client/overlay.cljs", :line 67, :column 1, :end-line 67, :end-column 16, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 67, :column 6, :end-line 67, :end-column 16}}, shadow-width {:name game.client.overlay/shadow-width, :file "src.client/game/client/overlay.cljs", :line 70, :column 1, :end-line 70, :end-column 18, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 70, :column 6, :end-line 70, :end-column 18}}, min-blocks {:name game.client.overlay/min-blocks, :file "src.client/game/client/overlay.cljs", :line 74, :column 1, :end-line 74, :end-column 16, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 74, :column 6, :end-line 74, :end-column 16}}, get-texture {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 78, :column 3, :end-line 78, :end-column 14, :arglists (quote ([pixi-renderer width height color transparent]))}, :name game.client.overlay/get-texture, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 14, :method-params ([pixi-renderer width height color transparent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 78, :max-fixed-arity 5, :fn-var true, :arglists (quote ([pixi-renderer width height color transparent]))}, max-blocks {:name game.client.overlay/max-blocks, :file "src.client/game/client/overlay.cljs", :line 73, :column 1, :end-line 73, :end-column 16, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 73, :column 6, :end-line 73, :end-column 16}}, on-xp-render {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 370, :column 3, :end-line 370, :end-column 15, :arglists (quote ([init-renderer component]))}, :name game.client.overlay/on-xp-render, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 15, :method-params ([init-renderer component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-renderer component]))}, ->new-overlay-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([$overlay params units camera renderer scene-properties pixi-renderer stage green-texture orange-texture yellow-texture red-texture transparent-texture started start-count stop-count])), :file nil}, :name game.client.overlay/->new-overlay-Record, :variadic false, :file "src.client/game/client/overlay.cljs", :method-params ([$overlay params units camera renderer scene-properties pixi-renderer stage green-texture orange-texture yellow-texture red-texture transparent-texture started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 230, :max-fixed-arity 16, :fn-var true, :arglists (quote ([$overlay params units camera renderer scene-properties pixi-renderer stage green-texture orange-texture yellow-texture red-texture transparent-texture started start-count stop-count]))}, get-cached-sprite {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 30, :column 7, :end-line 30, :end-column 24, :arglists (quote ([texture new-fn]))}, :name game.client.overlay/get-cached-sprite, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 24, :method-params ([texture new-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([texture new-fn]))}, vertex-shader {:name game.client.overlay/vertex-shader, :file "src.client/game/client/overlay.cljs", :line 269, :column 1, :end-line 269, :end-column 19, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 269, :column 6, :end-line 269, :end-column 19}}, on-render {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 187, :column 7, :end-line 187, :end-column 16, :arglists (quote ([init-renderer component]))}, :name game.client.overlay/on-render, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 16, :method-params ([init-renderer component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-renderer component]))}, get-pixi-filter {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 47, :column 7, :end-line 47, :end-column 22, :arglists (quote ([]))}, :name game.client.overlay/get-pixi-filter, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, shadow-opacity {:name game.client.overlay/shadow-opacity, :file "src.client/game/client/overlay.cljs", :line 69, :column 1, :end-line 69, :end-column 20, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 69, :column 6, :end-line 69, :end-column 20}}, select-texture {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 127, :column 7, :end-line 127, :end-column 21, :arglists (quote ([red-texture orange-texture yellow-texture green-texture health]))}, :name game.client.overlay/select-texture, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 21, :method-params ([red-texture orange-texture yellow-texture green-texture health]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 5, :fn-var true, :arglists (quote ([red-texture orange-texture yellow-texture green-texture health]))}, map->new-xp-overlay-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__25782])), :file nil}, :name game.client.overlay/map->new-xp-overlay-Record, :variadic false, :file "src.client/game/client/overlay.cljs", :method-params ([G__25782]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25782]))}, new-overlay {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 231, :column 3, :end-line 231, :end-column 14, :arglists (quote ([]))}, :name game.client.overlay/new-overlay, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 231, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-cache {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([]))}, :name game.client.overlay/new-cache, :variadic false, :file "src.client/game/client/overlay.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bar-block-width {:name game.client.overlay/bar-block-width, :file "src.client/game/client/overlay.cljs", :line 66, :column 1, :end-line 66, :end-column 21, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 66, :column 6, :end-line 66, :end-column 21}}, line-width {:name game.client.overlay/line-width, :file "src.client/game/client/overlay.cljs", :line 75, :column 1, :end-line 75, :end-column 16, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 75, :column 6, :end-line 75, :end-column 16}}, new-overlay-Record {:num-fields 16, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.overlay/new-overlay-Record, :file "src.client/game/client/overlay.cljs", :type true, :column 1, :internal-ctor true, :line 230, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-xp-overlay-Record {:num-fields 12, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.overlay/new-xp-overlay-Record, :file "src.client/game/client/overlay.cljs", :type true, :column 1, :internal-ctor true, :line 429, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, light-opacity {:name game.client.overlay/light-opacity, :file "src.client/game/client/overlay.cljs", :line 68, :column 1, :end-line 68, :end-column 19, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/overlay.cljs", :line 68, :column 6, :end-line 68, :end-column 19}}}, :require-macros {pprint cljs.pprint, infix.macros infix.macros, rum.core rum.core, game.shared.macros game.shared.macros, rum rum.core, macros game.shared.macros, sablono.core sablono.core, sablono sablono.core, m cats.core, cats.core cats.core, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:started :mesh-to-screenbox-map units yellow-texture init-scene :mesh-parent :orange-texture :transparent-texture green-texture :scene-properties :stage :else $overlay scene pixi-renderer :stop-count started :last-60-average mesh-parent orange-texture transparent-texture :width scene-properties stage :params :max-health stop-count :renderer :old-mesh :health-bars :pixi-overlay :red-texture params :start-count :material old-mesh pixi-overlay renderer :camera :health red-texture :units :yellow-texture :init-scene start-count material :green-texture camera :height :$page :$overlay :scene :pixi-renderer :model}, :order [:else :units :health :max-health :model :health-bars :mesh-to-screenbox-map :stage :scene-properties :width :height :last-60-average :pixi-renderer :green-texture :yellow-texture :orange-texture :red-texture :transparent-texture :$overlay :params :camera :renderer :started :start-count :stop-count :$page $overlay params units camera renderer scene-properties pixi-renderer stage green-texture orange-texture yellow-texture red-texture transparent-texture started start-count stop-count :scene :material :old-mesh :mesh-parent :init-scene :pixi-overlay scene init-scene pixi-overlay material mesh-parent old-mesh]}, :doc nil}