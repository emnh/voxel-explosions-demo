;; Analyzed by ClojureScript 1.8.40
{:use-macros {defcom game.shared.macros}, :excludes #{}, :name game.client.controls, :imports nil, :requires {game.client.config game.client.config, pprint cljs.pprint, math game.client.math, routing game.client.routing, jayq jayq.core, scene game.client.scene, game.client.routing game.client.routing, game.client.math game.client.math, game.client.scene game.client.scene, config game.client.config, jayq.core jayq.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, game.client.common game.client.common, common game.client.common}, :uses {atan2 game.client.math, data game.client.common, pi game.client.math, cos game.client.math, sqrt game.client.math, $ jayq.core, square game.client.math, sin game.client.math, unique-id game.client.common}, :defs {rotate-up {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 106, :column 3, :end-line 106, :end-column 12, :arglists (quote ([state]))}, :name game.client.controls/rotate-up, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, handle-key {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 210, :column 3, :end-line 210, :end-column 13, :arglists (quote ([keys-pressed event active]))}, :name game.client.controls/handle-key, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 13, :method-params ([keys-pressed event active]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 210, :max-fixed-arity 3, :fn-var true, :arglists (quote ([keys-pressed event active]))}, init-controls {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 244, :column 3, :end-line 244, :end-column 16, :arglists (quote ([component element config camera scene]))}, :name game.client.controls/init-controls, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 16, :method-params ([component element config camera scene]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 244, :max-fixed-arity 5, :fn-var true, :arglists (quote ([component element config camera scene]))}, scroll-up {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 128, :column 3, :end-line 128, :end-column 12, :arglists (quote ([state]))}, :name game.client.controls/scroll-up, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, scroll-handler {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 197, :column 7, :end-line 197, :end-column 21, :arglists (quote ([enabled keys-pressed state]))}, :name game.client.controls/scroll-handler, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 21, :method-params ([enabled keys-pressed state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 3, :fn-var true, :arglists (quote ([enabled keys-pressed state]))}, rotate-left {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 96, :column 3, :end-line 96, :end-column 14, :arglists (quote ([state]))}, :name game.client.controls/rotate-left, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, rebind {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 237, :column 7, :end-line 237, :end-column 13, :arglists (quote ([$element eventname handler]))}, :name game.client.controls/rebind, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 13, :method-params ([$element eventname handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$element eventname handler]))}, new-controls {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 284, :column 3, :end-line 284, :end-column 15, :arglists (quote ([]))}, :name game.client.controls/new-controls, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 284, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-elapsed {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 19, :column 7, :end-line 19, :end-column 18, :arglists (quote ([state]))}, :name game.client.controls/get-elapsed, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, rotate-down {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 111, :column 3, :end-line 111, :end-column 14, :arglists (quote ([state]))}, :name game.client.controls/rotate-down, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, zoom {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 139, :column 7, :end-line 139, :end-column 11, :arglists (quote ([state camera delta]))}, :name game.client.controls/zoom, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 11, :method-params ([state camera delta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state camera delta]))}, arc-ball-rotation-up-down {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 64, :column 7, :end-line 64, :end-column 32, :arglists (quote ([state sign]))}, :name game.client.controls/arc-ball-rotation-up-down, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 32, :method-params ([state sign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state sign]))}, prevent-default {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 14, :column 7, :end-line 14, :end-column 22, :arglists (quote ([event]))}, :name game.client.controls/prevent-default, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 22, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, rotate-right {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 101, :column 3, :end-line 101, :end-column 15, :arglists (quote ([state]))}, :name game.client.controls/rotate-right, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, scroll-right {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 122, :column 3, :end-line 122, :end-column 15, :arglists (quote ([state]))}, :name game.client.controls/scroll-right, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, reset-camera {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 168, :column 3, :end-line 168, :end-column 15, :arglists (quote ([state]))}, :name game.client.controls/reset-camera, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, key-down {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 229, :column 7, :end-line 229, :end-column 15, :arglists (quote ([keys-pressed event]))}, :name game.client.controls/key-down, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 15, :method-params ([keys-pressed event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys-pressed event]))}, handled-keys {:name game.client.controls/handled-keys, :file "src.client/game/client/controls.cljs", :line 181, :column 1, :end-line 181, :end-column 18, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 181, :column 6, :end-line 181, :end-column 18}}, arc-ball-rotation-left-right {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 44, :column 7, :end-line 44, :end-column 35, :arglists (quote ([state sign]))}, :name game.client.controls/arc-ball-rotation-left-right, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 35, :method-params ([state sign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state sign]))}, scroll-left {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 116, :column 3, :end-line 116, :end-column 14, :arglists (quote ([state]))}, :name game.client.controls/scroll-left, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, zoom-out {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 162, :column 3, :end-line 162, :end-column 11, :arglists (quote ([state]))}, :name game.client.controls/zoom-out, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 11, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, scroll {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 26, :column 3, :end-line 26, :end-column 9, :arglists (quote ([delta state]))}, :name game.client.controls/scroll, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 9, :method-params ([delta state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([delta state]))}, ->new-controls-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :positional, :arglists (quote ([renderer config camera scene init-scene $overlay render-stats engine-stats old-interval-handler-enabled keydownevt keyupevt started start-count stop-count])), :file nil}, :name game.client.controls/->new-controls-Record, :variadic false, :file "src.client/game/client/controls.cljs", :method-params ([renderer config camera scene init-scene $overlay render-stats engine-stats old-interval-handler-enabled keydownevt keyupevt started start-count stop-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 283, :max-fixed-arity 14, :fn-var true, :arglists (quote ([renderer config camera scene init-scene $overlay render-stats engine-stats old-interval-handler-enabled keydownevt keyupevt started start-count stop-count]))}, key-up {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 233, :column 7, :end-line 233, :end-column 13, :arglists (quote ([keys-pressed event]))}, :name game.client.controls/key-up, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 13, :method-params ([keys-pressed event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys-pressed event]))}, zoom-in {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 156, :column 3, :end-line 156, :end-column 10, :arglists (quote ([state]))}, :name game.client.controls/zoom-in, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 10, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, map->new-controls-Record {:protocol-inline nil, :meta {:internal-ctor true, :factory :map, :arglists (quote ([G__13474])), :file nil}, :name game.client.controls/map->new-controls-Record, :variadic false, :file "src.client/game/client/controls.cljs", :method-params ([G__13474]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 283, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13474]))}, new-controls-Record {:num-fields 14, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.controls/new-controls-Record, :file "src.client/game/client/controls.cljs", :type true, :column 1, :internal-ctor true, :line 283, :record true, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, scroll-down {:protocol-inline nil, :meta {:file "/home/emh/public_html/github/rts/src.client/game/client/controls.cljs", :line 134, :column 3, :end-line 134, :end-column 14, :arglists (quote ([state]))}, :name game.client.controls/scroll-down, :variadic false, :file "src.client/game/client/controls.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros {macros game.shared.macros, game.shared.macros game.shared.macros, pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:started init-scene :old-interval-handler-enabled $overlay scene :zoom-speed :stop-count started :config :keydownevt :rotate-speed :engine-stats :render-stats old-interval-handler-enabled :controls stop-count :ctrl config keydownevt :renderer engine-stats render-stats :start-count :keyupevt renderer :camera :origin :last-frame-time :init-scene :scroll-speed start-count keyupevt camera :$overlay :scene}, :order [:last-frame-time :camera :config :controls :scroll-speed :origin :rotate-speed :zoom-speed :scene :ctrl :$overlay :render-stats :engine-stats :keydownevt :keyupevt :old-interval-handler-enabled :renderer :init-scene :started :start-count :stop-count renderer config camera scene init-scene $overlay render-stats engine-stats old-interval-handler-enabled keydownevt keyupevt started start-count stop-count]}, :doc nil}