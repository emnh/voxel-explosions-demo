;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name game.client.ground, :imports nil, :requires {game.client.socket game.client.socket, game.client.config game.client.config, pprint cljs.pprint, p promesa.core, promesa.core promesa.core, jayq jayq.core, scene game.client.scene, game.client.scene game.client.scene, socket game.client.socket, config game.client.config, m cats.core, cats.core cats.core, jayq.core jayq.core, cljs.pprint cljs.pprint, com.stuartsierra.component com.stuartsierra.component, component com.stuartsierra.component, game.client.common game.client.common, common game.client.common}, :uses {data game.client.common, $ jayq.core}, :defs {get-map {:protocol-inline nil, :meta {:file "/home/emh/github/rts/src.client/game/client/ground.cljs", :line 15, :column 7, :end-line 15, :end-column 14, :arglists (quote ([component config socket scene mesh]))}, :name game.client.ground/get-map, :variadic false, :file "src.client/game/client/ground.cljs", :end-column 14, :method-params ([component config socket scene mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 5, :fn-var true, :arglists (quote ([component config socket scene mesh]))}, InitGround {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name game.client.ground/InitGround, :file "src.client/game/client/ground.cljs", :end-column 22, :type true, :column 12, :internal-ctor true, :line 48, :record true, :end-line 48, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->InitGround {:protocol-inline nil, :meta {:file "/home/emh/github/rts/src.client/game/client/ground.cljs", :line 48, :column 12, :end-line 48, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([config socket scene mesh]))}, :name game.client.ground/->InitGround, :variadic false, :file "src.client/game/client/ground.cljs", :end-column 22, :method-params ([config socket scene mesh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 48, :end-line 48, :max-fixed-arity 4, :fn-var true, :arglists (quote ([config socket scene mesh]))}, map->InitGround {:protocol-inline nil, :meta {:file "/home/emh/github/rts/src.client/game/client/ground.cljs", :line 48, :column 12, :end-line 48, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__11308]))}, :name game.client.ground/map->InitGround, :variadic false, :file "src.client/game/client/ground.cljs", :end-column 22, :method-params ([G__11308]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__11308]))}, new-init-ground {:protocol-inline nil, :meta {:file "/home/emh/github/rts/src.client/game/client/ground.cljs", :line 63, :column 7, :end-line 63, :end-column 22, :arglists (quote ([]))}, :name game.client.ground/new-init-ground, :variadic false, :file "src.client/game/client/ground.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {pprint cljs.pprint, cljs.pprint cljs.pprint, m cats.core, cats.core cats.core}, :cljs.analyzer/constants {:seen #{:y-faces scene :socket :config :name :width socket config :mesh :x-faces mesh :height :scene :data}, :order [:name :width :height :x-faces :y-faces :data :mesh :config :socket :scene config socket scene mesh]}, :doc nil}